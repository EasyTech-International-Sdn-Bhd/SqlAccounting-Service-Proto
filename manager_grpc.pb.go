// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/manager.proto

package sqlaccounting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ManagerWorker_SetTaskClientConfig_FullMethodName = "/sqlaccounting.ManagerWorker/SetTaskClientConfig"
	ManagerWorker_SetApiClientConfig_FullMethodName  = "/sqlaccounting.ManagerWorker/SetApiClientConfig"
	ManagerWorker_SetGpcCredentials_FullMethodName   = "/sqlaccounting.ManagerWorker/SetGpcCredentials"
	ManagerWorker_SetGcpProjectId_FullMethodName     = "/sqlaccounting.ManagerWorker/SetGcpProjectId"
)

// ManagerWorkerClient is the client API for ManagerWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerWorkerClient interface {
	SetTaskClientConfig(ctx context.Context, in *TaskClientRequest, opts ...grpc.CallOption) (*None, error)
	SetApiClientConfig(ctx context.Context, in *ApiClientRequest, opts ...grpc.CallOption) (*None, error)
	SetGpcCredentials(ctx context.Context, in *GcpCredentialsRequest, opts ...grpc.CallOption) (*None, error)
	SetGcpProjectId(ctx context.Context, in *GcpProjectIdRequest, opts ...grpc.CallOption) (*None, error)
}

type managerWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerWorkerClient(cc grpc.ClientConnInterface) ManagerWorkerClient {
	return &managerWorkerClient{cc}
}

func (c *managerWorkerClient) SetTaskClientConfig(ctx context.Context, in *TaskClientRequest, opts ...grpc.CallOption) (*None, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(None)
	err := c.cc.Invoke(ctx, ManagerWorker_SetTaskClientConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerWorkerClient) SetApiClientConfig(ctx context.Context, in *ApiClientRequest, opts ...grpc.CallOption) (*None, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(None)
	err := c.cc.Invoke(ctx, ManagerWorker_SetApiClientConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerWorkerClient) SetGpcCredentials(ctx context.Context, in *GcpCredentialsRequest, opts ...grpc.CallOption) (*None, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(None)
	err := c.cc.Invoke(ctx, ManagerWorker_SetGpcCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerWorkerClient) SetGcpProjectId(ctx context.Context, in *GcpProjectIdRequest, opts ...grpc.CallOption) (*None, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(None)
	err := c.cc.Invoke(ctx, ManagerWorker_SetGcpProjectId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerWorkerServer is the server API for ManagerWorker service.
// All implementations must embed UnimplementedManagerWorkerServer
// for forward compatibility.
type ManagerWorkerServer interface {
	SetTaskClientConfig(context.Context, *TaskClientRequest) (*None, error)
	SetApiClientConfig(context.Context, *ApiClientRequest) (*None, error)
	SetGpcCredentials(context.Context, *GcpCredentialsRequest) (*None, error)
	SetGcpProjectId(context.Context, *GcpProjectIdRequest) (*None, error)
	mustEmbedUnimplementedManagerWorkerServer()
}

// UnimplementedManagerWorkerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManagerWorkerServer struct{}

func (UnimplementedManagerWorkerServer) SetTaskClientConfig(context.Context, *TaskClientRequest) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskClientConfig not implemented")
}
func (UnimplementedManagerWorkerServer) SetApiClientConfig(context.Context, *ApiClientRequest) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApiClientConfig not implemented")
}
func (UnimplementedManagerWorkerServer) SetGpcCredentials(context.Context, *GcpCredentialsRequest) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGpcCredentials not implemented")
}
func (UnimplementedManagerWorkerServer) SetGcpProjectId(context.Context, *GcpProjectIdRequest) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGcpProjectId not implemented")
}
func (UnimplementedManagerWorkerServer) mustEmbedUnimplementedManagerWorkerServer() {}
func (UnimplementedManagerWorkerServer) testEmbeddedByValue()                       {}

// UnsafeManagerWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerWorkerServer will
// result in compilation errors.
type UnsafeManagerWorkerServer interface {
	mustEmbedUnimplementedManagerWorkerServer()
}

func RegisterManagerWorkerServer(s grpc.ServiceRegistrar, srv ManagerWorkerServer) {
	// If the following call pancis, it indicates UnimplementedManagerWorkerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ManagerWorker_ServiceDesc, srv)
}

func _ManagerWorker_SetTaskClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerWorkerServer).SetTaskClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerWorker_SetTaskClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerWorkerServer).SetTaskClientConfig(ctx, req.(*TaskClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerWorker_SetApiClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerWorkerServer).SetApiClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerWorker_SetApiClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerWorkerServer).SetApiClientConfig(ctx, req.(*ApiClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerWorker_SetGpcCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GcpCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerWorkerServer).SetGpcCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerWorker_SetGpcCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerWorkerServer).SetGpcCredentials(ctx, req.(*GcpCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerWorker_SetGcpProjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GcpProjectIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerWorkerServer).SetGcpProjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerWorker_SetGcpProjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerWorkerServer).SetGcpProjectId(ctx, req.(*GcpProjectIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerWorker_ServiceDesc is the grpc.ServiceDesc for ManagerWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sqlaccounting.ManagerWorker",
	HandlerType: (*ManagerWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTaskClientConfig",
			Handler:    _ManagerWorker_SetTaskClientConfig_Handler,
		},
		{
			MethodName: "SetApiClientConfig",
			Handler:    _ManagerWorker_SetApiClientConfig_Handler,
		},
		{
			MethodName: "SetGpcCredentials",
			Handler:    _ManagerWorker_SetGpcCredentials_Handler,
		},
		{
			MethodName: "SetGcpProjectId",
			Handler:    _ManagerWorker_SetGcpProjectId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/manager.proto",
}
