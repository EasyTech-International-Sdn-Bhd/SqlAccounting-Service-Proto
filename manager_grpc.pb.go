// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/manager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ManagerConfigurator_SetTaskClientConfig_FullMethodName = "/proto.ManagerConfigurator/SetTaskClientConfig"
	ManagerConfigurator_SetApiClientConfig_FullMethodName  = "/proto.ManagerConfigurator/SetApiClientConfig"
	ManagerConfigurator_SetGpcCredentials_FullMethodName   = "/proto.ManagerConfigurator/SetGpcCredentials"
	ManagerConfigurator_SetGcpProjectId_FullMethodName     = "/proto.ManagerConfigurator/SetGcpProjectId"
	ManagerConfigurator_GetServiceId_FullMethodName        = "/proto.ManagerConfigurator/GetServiceId"
)

// ManagerConfiguratorClient is the client API for ManagerConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerConfiguratorClient interface {
	SetTaskClientConfig(ctx context.Context, in *TaskClientRequest, opts ...grpc.CallOption) (*None, error)
	SetApiClientConfig(ctx context.Context, in *ApiClientRequest, opts ...grpc.CallOption) (*ClientId, error)
	SetGpcCredentials(ctx context.Context, in *GcpCredentialsRequest, opts ...grpc.CallOption) (*None, error)
	SetGcpProjectId(ctx context.Context, in *GcpProjectIdRequest, opts ...grpc.CallOption) (*None, error)
	GetServiceId(ctx context.Context, in *None, opts ...grpc.CallOption) (*IdResponse, error)
}

type managerConfiguratorClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerConfiguratorClient(cc grpc.ClientConnInterface) ManagerConfiguratorClient {
	return &managerConfiguratorClient{cc}
}

func (c *managerConfiguratorClient) SetTaskClientConfig(ctx context.Context, in *TaskClientRequest, opts ...grpc.CallOption) (*None, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(None)
	err := c.cc.Invoke(ctx, ManagerConfigurator_SetTaskClientConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerConfiguratorClient) SetApiClientConfig(ctx context.Context, in *ApiClientRequest, opts ...grpc.CallOption) (*ClientId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientId)
	err := c.cc.Invoke(ctx, ManagerConfigurator_SetApiClientConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerConfiguratorClient) SetGpcCredentials(ctx context.Context, in *GcpCredentialsRequest, opts ...grpc.CallOption) (*None, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(None)
	err := c.cc.Invoke(ctx, ManagerConfigurator_SetGpcCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerConfiguratorClient) SetGcpProjectId(ctx context.Context, in *GcpProjectIdRequest, opts ...grpc.CallOption) (*None, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(None)
	err := c.cc.Invoke(ctx, ManagerConfigurator_SetGcpProjectId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerConfiguratorClient) GetServiceId(ctx context.Context, in *None, opts ...grpc.CallOption) (*IdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, ManagerConfigurator_GetServiceId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerConfiguratorServer is the server API for ManagerConfigurator service.
// All implementations must embed UnimplementedManagerConfiguratorServer
// for forward compatibility.
type ManagerConfiguratorServer interface {
	SetTaskClientConfig(context.Context, *TaskClientRequest) (*None, error)
	SetApiClientConfig(context.Context, *ApiClientRequest) (*ClientId, error)
	SetGpcCredentials(context.Context, *GcpCredentialsRequest) (*None, error)
	SetGcpProjectId(context.Context, *GcpProjectIdRequest) (*None, error)
	GetServiceId(context.Context, *None) (*IdResponse, error)
	mustEmbedUnimplementedManagerConfiguratorServer()
}

// UnimplementedManagerConfiguratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManagerConfiguratorServer struct{}

func (UnimplementedManagerConfiguratorServer) SetTaskClientConfig(context.Context, *TaskClientRequest) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskClientConfig not implemented")
}
func (UnimplementedManagerConfiguratorServer) SetApiClientConfig(context.Context, *ApiClientRequest) (*ClientId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApiClientConfig not implemented")
}
func (UnimplementedManagerConfiguratorServer) SetGpcCredentials(context.Context, *GcpCredentialsRequest) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGpcCredentials not implemented")
}
func (UnimplementedManagerConfiguratorServer) SetGcpProjectId(context.Context, *GcpProjectIdRequest) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGcpProjectId not implemented")
}
func (UnimplementedManagerConfiguratorServer) GetServiceId(context.Context, *None) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceId not implemented")
}
func (UnimplementedManagerConfiguratorServer) mustEmbedUnimplementedManagerConfiguratorServer() {}
func (UnimplementedManagerConfiguratorServer) testEmbeddedByValue()                             {}

// UnsafeManagerConfiguratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerConfiguratorServer will
// result in compilation errors.
type UnsafeManagerConfiguratorServer interface {
	mustEmbedUnimplementedManagerConfiguratorServer()
}

func RegisterManagerConfiguratorServer(s grpc.ServiceRegistrar, srv ManagerConfiguratorServer) {
	// If the following call pancis, it indicates UnimplementedManagerConfiguratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ManagerConfigurator_ServiceDesc, srv)
}

func _ManagerConfigurator_SetTaskClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerConfiguratorServer).SetTaskClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerConfigurator_SetTaskClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerConfiguratorServer).SetTaskClientConfig(ctx, req.(*TaskClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerConfigurator_SetApiClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerConfiguratorServer).SetApiClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerConfigurator_SetApiClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerConfiguratorServer).SetApiClientConfig(ctx, req.(*ApiClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerConfigurator_SetGpcCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GcpCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerConfiguratorServer).SetGpcCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerConfigurator_SetGpcCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerConfiguratorServer).SetGpcCredentials(ctx, req.(*GcpCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerConfigurator_SetGcpProjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GcpProjectIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerConfiguratorServer).SetGcpProjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerConfigurator_SetGcpProjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerConfiguratorServer).SetGcpProjectId(ctx, req.(*GcpProjectIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerConfigurator_GetServiceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(None)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerConfiguratorServer).GetServiceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerConfigurator_GetServiceId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerConfiguratorServer).GetServiceId(ctx, req.(*None))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerConfigurator_ServiceDesc is the grpc.ServiceDesc for ManagerConfigurator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerConfigurator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ManagerConfigurator",
	HandlerType: (*ManagerConfiguratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTaskClientConfig",
			Handler:    _ManagerConfigurator_SetTaskClientConfig_Handler,
		},
		{
			MethodName: "SetApiClientConfig",
			Handler:    _ManagerConfigurator_SetApiClientConfig_Handler,
		},
		{
			MethodName: "SetGpcCredentials",
			Handler:    _ManagerConfigurator_SetGpcCredentials_Handler,
		},
		{
			MethodName: "SetGcpProjectId",
			Handler:    _ManagerConfigurator_SetGcpProjectId_Handler,
		},
		{
			MethodName: "GetServiceId",
			Handler:    _ManagerConfigurator_GetServiceId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/manager.proto",
}
