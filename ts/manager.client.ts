// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "manager.proto" (package "proto", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ManagerConfigurator } from "./manager";
import type { IdResponse } from "./manager";
import type { GcpProjectIdRequest } from "./manager";
import type { GcpCredentialsRequest } from "./manager";
import type { ApiClientRequest } from "./manager";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { None } from "./manager";
import type { TaskClientRequest } from "./manager";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service proto.ManagerConfigurator
 */
export interface IManagerConfiguratorClient {
    /**
     * @generated from protobuf rpc: SetTaskClientConfig(proto.TaskClientRequest) returns (proto.None);
     */
    setTaskClientConfig(input: TaskClientRequest, options?: RpcOptions): UnaryCall<TaskClientRequest, None>;
    /**
     * @generated from protobuf rpc: SetApiClientConfig(proto.ApiClientRequest) returns (proto.None);
     */
    setApiClientConfig(input: ApiClientRequest, options?: RpcOptions): UnaryCall<ApiClientRequest, None>;
    /**
     * @generated from protobuf rpc: SetGpcCredentials(proto.GcpCredentialsRequest) returns (proto.None);
     */
    setGpcCredentials(input: GcpCredentialsRequest, options?: RpcOptions): UnaryCall<GcpCredentialsRequest, None>;
    /**
     * @generated from protobuf rpc: SetGcpProjectId(proto.GcpProjectIdRequest) returns (proto.None);
     */
    setGcpProjectId(input: GcpProjectIdRequest, options?: RpcOptions): UnaryCall<GcpProjectIdRequest, None>;
    /**
     * @generated from protobuf rpc: GetServiceId(proto.None) returns (proto.IdResponse);
     */
    getServiceId(input: None, options?: RpcOptions): UnaryCall<None, IdResponse>;
}
/**
 * @generated from protobuf service proto.ManagerConfigurator
 */
export class ManagerConfiguratorClient implements IManagerConfiguratorClient, ServiceInfo {
    typeName = ManagerConfigurator.typeName;
    methods = ManagerConfigurator.methods;
    options = ManagerConfigurator.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SetTaskClientConfig(proto.TaskClientRequest) returns (proto.None);
     */
    setTaskClientConfig(input: TaskClientRequest, options?: RpcOptions): UnaryCall<TaskClientRequest, None> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TaskClientRequest, None>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetApiClientConfig(proto.ApiClientRequest) returns (proto.None);
     */
    setApiClientConfig(input: ApiClientRequest, options?: RpcOptions): UnaryCall<ApiClientRequest, None> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ApiClientRequest, None>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetGpcCredentials(proto.GcpCredentialsRequest) returns (proto.None);
     */
    setGpcCredentials(input: GcpCredentialsRequest, options?: RpcOptions): UnaryCall<GcpCredentialsRequest, None> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GcpCredentialsRequest, None>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetGcpProjectId(proto.GcpProjectIdRequest) returns (proto.None);
     */
    setGcpProjectId(input: GcpProjectIdRequest, options?: RpcOptions): UnaryCall<GcpProjectIdRequest, None> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GcpProjectIdRequest, None>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetServiceId(proto.None) returns (proto.IdResponse);
     */
    getServiceId(input: None, options?: RpcOptions): UnaryCall<None, IdResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<None, IdResponse>("unary", this._transport, method, opt, input);
    }
}
