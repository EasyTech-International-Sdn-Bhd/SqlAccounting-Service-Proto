// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "controls.proto" (package "proto", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ControlManagement } from "./controls";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Result } from "./controls";
import type { Nothing } from "./controls";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service proto.ControlManagement
 */
export interface IControlManagementClient {
    /**
     * @generated from protobuf rpc: Ping(proto.Nothing) returns (proto.Result);
     */
    ping(input: Nothing, options?: RpcOptions): UnaryCall<Nothing, Result>;
    /**
     * @generated from protobuf rpc: Start(proto.Nothing) returns (proto.Result);
     */
    start(input: Nothing, options?: RpcOptions): UnaryCall<Nothing, Result>;
    /**
     * @generated from protobuf rpc: Stop(proto.Nothing) returns (proto.Result);
     */
    stop(input: Nothing, options?: RpcOptions): UnaryCall<Nothing, Result>;
    /**
     * @generated from protobuf rpc: Restart(proto.Nothing) returns (proto.Result);
     */
    restart(input: Nothing, options?: RpcOptions): UnaryCall<Nothing, Result>;
}
/**
 * @generated from protobuf service proto.ControlManagement
 */
export class ControlManagementClient implements IControlManagementClient, ServiceInfo {
    typeName = ControlManagement.typeName;
    methods = ControlManagement.methods;
    options = ControlManagement.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Ping(proto.Nothing) returns (proto.Result);
     */
    ping(input: Nothing, options?: RpcOptions): UnaryCall<Nothing, Result> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Nothing, Result>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Start(proto.Nothing) returns (proto.Result);
     */
    start(input: Nothing, options?: RpcOptions): UnaryCall<Nothing, Result> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Nothing, Result>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Stop(proto.Nothing) returns (proto.Result);
     */
    stop(input: Nothing, options?: RpcOptions): UnaryCall<Nothing, Result> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Nothing, Result>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Restart(proto.Nothing) returns (proto.Result);
     */
    restart(input: Nothing, options?: RpcOptions): UnaryCall<Nothing, Result> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Nothing, Result>("unary", this._transport, method, opt, input);
    }
}
