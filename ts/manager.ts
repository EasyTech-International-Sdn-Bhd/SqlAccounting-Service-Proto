// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "manager.proto" (package "proto", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message proto.TaskClientRequest
 */
export interface TaskClientRequest {
    /**
     * @generated from protobuf field: int32 db = 1;
     */
    db: number;
    /**
     * @generated from protobuf field: string addr = 2;
     */
    addr: string;
    /**
     * @generated from protobuf field: string username = 3;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 4;
     */
    password: string;
}
/**
 * @generated from protobuf message proto.ApiClientRequest
 */
export interface ApiClientRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: string url = 3;
     */
    url: string;
    /**
     * @generated from protobuf field: string appName = 4;
     */
    appName: string;
}
/**
 * @generated from protobuf message proto.GcpCredentialsRequest
 */
export interface GcpCredentialsRequest {
    /**
     * @generated from protobuf field: string jsonData = 1;
     */
    jsonData: string;
}
/**
 * @generated from protobuf message proto.GcpProjectIdRequest
 */
export interface GcpProjectIdRequest {
    /**
     * @generated from protobuf field: string projectId = 1;
     */
    projectId: string;
}
/**
 * @generated from protobuf message proto.IdResponse
 */
export interface IdResponse {
    /**
     * @generated from protobuf field: string serviceId = 1;
     */
    serviceId: string;
}
/**
 * @generated from protobuf message proto.None
 */
export interface None {
}
// @generated message type with reflection information, may provide speed optimized methods
class TaskClientRequest$Type extends MessageType<TaskClientRequest> {
    constructor() {
        super("proto.TaskClientRequest", [
            { no: 1, name: "db", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TaskClientRequest>): TaskClientRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.db = 0;
        message.addr = "";
        message.username = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<TaskClientRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskClientRequest): TaskClientRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 db */ 1:
                    message.db = reader.int32();
                    break;
                case /* string addr */ 2:
                    message.addr = reader.string();
                    break;
                case /* string username */ 3:
                    message.username = reader.string();
                    break;
                case /* string password */ 4:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskClientRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 db = 1; */
        if (message.db !== 0)
            writer.tag(1, WireType.Varint).int32(message.db);
        /* string addr = 2; */
        if (message.addr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.addr);
        /* string username = 3; */
        if (message.username !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.username);
        /* string password = 4; */
        if (message.password !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.TaskClientRequest
 */
export const TaskClientRequest = new TaskClientRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApiClientRequest$Type extends MessageType<ApiClientRequest> {
    constructor() {
        super("proto.ApiClientRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "appName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ApiClientRequest>): ApiClientRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        message.password = "";
        message.url = "";
        message.appName = "";
        if (value !== undefined)
            reflectionMergePartial<ApiClientRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApiClientRequest): ApiClientRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* string url */ 3:
                    message.url = reader.string();
                    break;
                case /* string appName */ 4:
                    message.appName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApiClientRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* string url = 3; */
        if (message.url !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.url);
        /* string appName = 4; */
        if (message.appName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.appName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ApiClientRequest
 */
export const ApiClientRequest = new ApiClientRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GcpCredentialsRequest$Type extends MessageType<GcpCredentialsRequest> {
    constructor() {
        super("proto.GcpCredentialsRequest", [
            { no: 1, name: "jsonData", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GcpCredentialsRequest>): GcpCredentialsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jsonData = "";
        if (value !== undefined)
            reflectionMergePartial<GcpCredentialsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GcpCredentialsRequest): GcpCredentialsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string jsonData */ 1:
                    message.jsonData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GcpCredentialsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string jsonData = 1; */
        if (message.jsonData !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.jsonData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.GcpCredentialsRequest
 */
export const GcpCredentialsRequest = new GcpCredentialsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GcpProjectIdRequest$Type extends MessageType<GcpProjectIdRequest> {
    constructor() {
        super("proto.GcpProjectIdRequest", [
            { no: 1, name: "projectId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GcpProjectIdRequest>): GcpProjectIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        if (value !== undefined)
            reflectionMergePartial<GcpProjectIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GcpProjectIdRequest): GcpProjectIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string projectId */ 1:
                    message.projectId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GcpProjectIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string projectId = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.GcpProjectIdRequest
 */
export const GcpProjectIdRequest = new GcpProjectIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdResponse$Type extends MessageType<IdResponse> {
    constructor() {
        super("proto.IdResponse", [
            { no: 1, name: "serviceId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IdResponse>): IdResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceId = "";
        if (value !== undefined)
            reflectionMergePartial<IdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IdResponse): IdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string serviceId */ 1:
                    message.serviceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string serviceId = 1; */
        if (message.serviceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.IdResponse
 */
export const IdResponse = new IdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class None$Type extends MessageType<None> {
    constructor() {
        super("proto.None", []);
    }
    create(value?: PartialMessage<None>): None {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<None>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: None): None {
        return target ?? this.create();
    }
    internalBinaryWrite(message: None, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.None
 */
export const None = new None$Type();
/**
 * @generated ServiceType for protobuf service proto.ManagerConfigurator
 */
export const ManagerConfigurator = new ServiceType("proto.ManagerConfigurator", [
    { name: "SetTaskClientConfig", options: {}, I: TaskClientRequest, O: None },
    { name: "SetApiClientConfig", options: {}, I: ApiClientRequest, O: None },
    { name: "SetGpcCredentials", options: {}, I: GcpCredentialsRequest, O: None },
    { name: "SetGcpProjectId", options: {}, I: GcpProjectIdRequest, O: None },
    { name: "GetServiceId", options: {}, I: None, O: IdResponse }
]);
