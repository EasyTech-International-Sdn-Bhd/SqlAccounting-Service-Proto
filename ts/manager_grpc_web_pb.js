/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: manager.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.proto = require('./manager_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.ManagerConfiguratorClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.ManagerConfiguratorPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.TaskClientRequest,
 *   !proto.proto.None>}
 */
const methodDescriptor_ManagerConfigurator_SetTaskClientConfig = new grpc.web.MethodDescriptor(
  '/proto.ManagerConfigurator/SetTaskClientConfig',
  grpc.web.MethodType.UNARY,
  proto.proto.TaskClientRequest,
  proto.proto.None,
  /**
   * @param {!proto.proto.TaskClientRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.None.deserializeBinary
);


/**
 * @param {!proto.proto.TaskClientRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.None)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.None>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.ManagerConfiguratorClient.prototype.setTaskClientConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.ManagerConfigurator/SetTaskClientConfig',
      request,
      metadata || {},
      methodDescriptor_ManagerConfigurator_SetTaskClientConfig,
      callback);
};


/**
 * @param {!proto.proto.TaskClientRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.None>}
 *     Promise that resolves to the response
 */
proto.proto.ManagerConfiguratorPromiseClient.prototype.setTaskClientConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.ManagerConfigurator/SetTaskClientConfig',
      request,
      metadata || {},
      methodDescriptor_ManagerConfigurator_SetTaskClientConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.ApiClientRequest,
 *   !proto.proto.None>}
 */
const methodDescriptor_ManagerConfigurator_SetApiClientConfig = new grpc.web.MethodDescriptor(
  '/proto.ManagerConfigurator/SetApiClientConfig',
  grpc.web.MethodType.UNARY,
  proto.proto.ApiClientRequest,
  proto.proto.None,
  /**
   * @param {!proto.proto.ApiClientRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.None.deserializeBinary
);


/**
 * @param {!proto.proto.ApiClientRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.None)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.None>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.ManagerConfiguratorClient.prototype.setApiClientConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.ManagerConfigurator/SetApiClientConfig',
      request,
      metadata || {},
      methodDescriptor_ManagerConfigurator_SetApiClientConfig,
      callback);
};


/**
 * @param {!proto.proto.ApiClientRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.None>}
 *     Promise that resolves to the response
 */
proto.proto.ManagerConfiguratorPromiseClient.prototype.setApiClientConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.ManagerConfigurator/SetApiClientConfig',
      request,
      metadata || {},
      methodDescriptor_ManagerConfigurator_SetApiClientConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GcpCredentialsRequest,
 *   !proto.proto.None>}
 */
const methodDescriptor_ManagerConfigurator_SetGpcCredentials = new grpc.web.MethodDescriptor(
  '/proto.ManagerConfigurator/SetGpcCredentials',
  grpc.web.MethodType.UNARY,
  proto.proto.GcpCredentialsRequest,
  proto.proto.None,
  /**
   * @param {!proto.proto.GcpCredentialsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.None.deserializeBinary
);


/**
 * @param {!proto.proto.GcpCredentialsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.None)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.None>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.ManagerConfiguratorClient.prototype.setGpcCredentials =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.ManagerConfigurator/SetGpcCredentials',
      request,
      metadata || {},
      methodDescriptor_ManagerConfigurator_SetGpcCredentials,
      callback);
};


/**
 * @param {!proto.proto.GcpCredentialsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.None>}
 *     Promise that resolves to the response
 */
proto.proto.ManagerConfiguratorPromiseClient.prototype.setGpcCredentials =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.ManagerConfigurator/SetGpcCredentials',
      request,
      metadata || {},
      methodDescriptor_ManagerConfigurator_SetGpcCredentials);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GcpProjectIdRequest,
 *   !proto.proto.None>}
 */
const methodDescriptor_ManagerConfigurator_SetGcpProjectId = new grpc.web.MethodDescriptor(
  '/proto.ManagerConfigurator/SetGcpProjectId',
  grpc.web.MethodType.UNARY,
  proto.proto.GcpProjectIdRequest,
  proto.proto.None,
  /**
   * @param {!proto.proto.GcpProjectIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.None.deserializeBinary
);


/**
 * @param {!proto.proto.GcpProjectIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.None)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.None>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.ManagerConfiguratorClient.prototype.setGcpProjectId =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.ManagerConfigurator/SetGcpProjectId',
      request,
      metadata || {},
      methodDescriptor_ManagerConfigurator_SetGcpProjectId,
      callback);
};


/**
 * @param {!proto.proto.GcpProjectIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.None>}
 *     Promise that resolves to the response
 */
proto.proto.ManagerConfiguratorPromiseClient.prototype.setGcpProjectId =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.ManagerConfigurator/SetGcpProjectId',
      request,
      metadata || {},
      methodDescriptor_ManagerConfigurator_SetGcpProjectId);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.None,
 *   !proto.proto.IdResponse>}
 */
const methodDescriptor_ManagerConfigurator_GetServiceId = new grpc.web.MethodDescriptor(
  '/proto.ManagerConfigurator/GetServiceId',
  grpc.web.MethodType.UNARY,
  proto.proto.None,
  proto.proto.IdResponse,
  /**
   * @param {!proto.proto.None} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.IdResponse.deserializeBinary
);


/**
 * @param {!proto.proto.None} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.IdResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.IdResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.ManagerConfiguratorClient.prototype.getServiceId =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.ManagerConfigurator/GetServiceId',
      request,
      metadata || {},
      methodDescriptor_ManagerConfigurator_GetServiceId,
      callback);
};


/**
 * @param {!proto.proto.None} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.IdResponse>}
 *     Promise that resolves to the response
 */
proto.proto.ManagerConfiguratorPromiseClient.prototype.getServiceId =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.ManagerConfigurator/GetServiceId',
      request,
      metadata || {},
      methodDescriptor_ManagerConfigurator_GetServiceId);
};


module.exports = proto.proto;

