/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: configurator.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as configurator_pb from './configurator_pb'; // proto import: "configurator.proto"


export class SetupConfiguratorClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreate = new grpcWeb.MethodDescriptor(
    '/proto.SetupConfigurator/Create',
    grpcWeb.MethodType.UNARY,
    configurator_pb.CreateRequest,
    configurator_pb.Empty,
    (request: configurator_pb.CreateRequest) => {
      return request.serializeBinary();
    },
    configurator_pb.Empty.deserializeBinary
  );

  create(
    request: configurator_pb.CreateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<configurator_pb.Empty>;

  create(
    request: configurator_pb.CreateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void): grpcWeb.ClientReadableStream<configurator_pb.Empty>;

  create(
    request: configurator_pb.CreateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.SetupConfigurator/Create',
        request,
        metadata || {},
        this.methodDescriptorCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.SetupConfigurator/Create',
    request,
    metadata || {},
    this.methodDescriptorCreate);
  }

  methodDescriptorIsDcfParsable = new grpcWeb.MethodDescriptor(
    '/proto.SetupConfigurator/IsDcfParsable',
    grpcWeb.MethodType.UNARY,
    configurator_pb.IsDcfParsableRequest,
    configurator_pb.IsDcfParsableResponse,
    (request: configurator_pb.IsDcfParsableRequest) => {
      return request.serializeBinary();
    },
    configurator_pb.IsDcfParsableResponse.deserializeBinary
  );

  isDcfParsable(
    request: configurator_pb.IsDcfParsableRequest,
    metadata?: grpcWeb.Metadata | null): Promise<configurator_pb.IsDcfParsableResponse>;

  isDcfParsable(
    request: configurator_pb.IsDcfParsableRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: configurator_pb.IsDcfParsableResponse) => void): grpcWeb.ClientReadableStream<configurator_pb.IsDcfParsableResponse>;

  isDcfParsable(
    request: configurator_pb.IsDcfParsableRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: configurator_pb.IsDcfParsableResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.SetupConfigurator/IsDcfParsable',
        request,
        metadata || {},
        this.methodDescriptorIsDcfParsable,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.SetupConfigurator/IsDcfParsable',
    request,
    metadata || {},
    this.methodDescriptorIsDcfParsable);
  }

  methodDescriptorSetDatabase = new grpcWeb.MethodDescriptor(
    '/proto.SetupConfigurator/SetDatabase',
    grpcWeb.MethodType.UNARY,
    configurator_pb.Database,
    configurator_pb.Empty,
    (request: configurator_pb.Database) => {
      return request.serializeBinary();
    },
    configurator_pb.Empty.deserializeBinary
  );

  setDatabase(
    request: configurator_pb.Database,
    metadata?: grpcWeb.Metadata | null): Promise<configurator_pb.Empty>;

  setDatabase(
    request: configurator_pb.Database,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void): grpcWeb.ClientReadableStream<configurator_pb.Empty>;

  setDatabase(
    request: configurator_pb.Database,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.SetupConfigurator/SetDatabase',
        request,
        metadata || {},
        this.methodDescriptorSetDatabase,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.SetupConfigurator/SetDatabase',
    request,
    metadata || {},
    this.methodDescriptorSetDatabase);
  }

  methodDescriptorSetTempPath = new grpcWeb.MethodDescriptor(
    '/proto.SetupConfigurator/SetTempPath',
    grpcWeb.MethodType.UNARY,
    configurator_pb.TempPathRequest,
    configurator_pb.Empty,
    (request: configurator_pb.TempPathRequest) => {
      return request.serializeBinary();
    },
    configurator_pb.Empty.deserializeBinary
  );

  setTempPath(
    request: configurator_pb.TempPathRequest,
    metadata?: grpcWeb.Metadata | null): Promise<configurator_pb.Empty>;

  setTempPath(
    request: configurator_pb.TempPathRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void): grpcWeb.ClientReadableStream<configurator_pb.Empty>;

  setTempPath(
    request: configurator_pb.TempPathRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.SetupConfigurator/SetTempPath',
        request,
        metadata || {},
        this.methodDescriptorSetTempPath,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.SetupConfigurator/SetTempPath',
    request,
    metadata || {},
    this.methodDescriptorSetTempPath);
  }

  methodDescriptorSetPatchUrl = new grpcWeb.MethodDescriptor(
    '/proto.SetupConfigurator/SetPatchUrl',
    grpcWeb.MethodType.UNARY,
    configurator_pb.PatchUrlRequest,
    configurator_pb.Empty,
    (request: configurator_pb.PatchUrlRequest) => {
      return request.serializeBinary();
    },
    configurator_pb.Empty.deserializeBinary
  );

  setPatchUrl(
    request: configurator_pb.PatchUrlRequest,
    metadata?: grpcWeb.Metadata | null): Promise<configurator_pb.Empty>;

  setPatchUrl(
    request: configurator_pb.PatchUrlRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void): grpcWeb.ClientReadableStream<configurator_pb.Empty>;

  setPatchUrl(
    request: configurator_pb.PatchUrlRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.SetupConfigurator/SetPatchUrl',
        request,
        metadata || {},
        this.methodDescriptorSetPatchUrl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.SetupConfigurator/SetPatchUrl',
    request,
    metadata || {},
    this.methodDescriptorSetPatchUrl);
  }

  methodDescriptorSetHookUrl = new grpcWeb.MethodDescriptor(
    '/proto.SetupConfigurator/SetHookUrl',
    grpcWeb.MethodType.UNARY,
    configurator_pb.HookUrlRequest,
    configurator_pb.Empty,
    (request: configurator_pb.HookUrlRequest) => {
      return request.serializeBinary();
    },
    configurator_pb.Empty.deserializeBinary
  );

  setHookUrl(
    request: configurator_pb.HookUrlRequest,
    metadata?: grpcWeb.Metadata | null): Promise<configurator_pb.Empty>;

  setHookUrl(
    request: configurator_pb.HookUrlRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void): grpcWeb.ClientReadableStream<configurator_pb.Empty>;

  setHookUrl(
    request: configurator_pb.HookUrlRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.SetupConfigurator/SetHookUrl',
        request,
        metadata || {},
        this.methodDescriptorSetHookUrl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.SetupConfigurator/SetHookUrl',
    request,
    metadata || {},
    this.methodDescriptorSetHookUrl);
  }

  methodDescriptorIsReachable = new grpcWeb.MethodDescriptor(
    '/proto.SetupConfigurator/IsReachable',
    grpcWeb.MethodType.UNARY,
    configurator_pb.ReachableRequest,
    configurator_pb.Empty,
    (request: configurator_pb.ReachableRequest) => {
      return request.serializeBinary();
    },
    configurator_pb.Empty.deserializeBinary
  );

  isReachable(
    request: configurator_pb.ReachableRequest,
    metadata?: grpcWeb.Metadata | null): Promise<configurator_pb.Empty>;

  isReachable(
    request: configurator_pb.ReachableRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void): grpcWeb.ClientReadableStream<configurator_pb.Empty>;

  isReachable(
    request: configurator_pb.ReachableRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.SetupConfigurator/IsReachable',
        request,
        metadata || {},
        this.methodDescriptorIsReachable,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.SetupConfigurator/IsReachable',
    request,
    metadata || {},
    this.methodDescriptorIsReachable);
  }

  methodDescriptorLoginConfigurator = new grpcWeb.MethodDescriptor(
    '/proto.SetupConfigurator/LoginConfigurator',
    grpcWeb.MethodType.UNARY,
    configurator_pb.LoginConfiguratorRequest,
    configurator_pb.Empty,
    (request: configurator_pb.LoginConfiguratorRequest) => {
      return request.serializeBinary();
    },
    configurator_pb.Empty.deserializeBinary
  );

  loginConfigurator(
    request: configurator_pb.LoginConfiguratorRequest,
    metadata?: grpcWeb.Metadata | null): Promise<configurator_pb.Empty>;

  loginConfigurator(
    request: configurator_pb.LoginConfiguratorRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void): grpcWeb.ClientReadableStream<configurator_pb.Empty>;

  loginConfigurator(
    request: configurator_pb.LoginConfiguratorRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: configurator_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.SetupConfigurator/LoginConfigurator',
        request,
        metadata || {},
        this.methodDescriptorLoginConfigurator,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.SetupConfigurator/LoginConfigurator',
    request,
    metadata || {},
    this.methodDescriptorLoginConfigurator);
  }

  methodDescriptorInstallPlugins = new grpcWeb.MethodDescriptor(
    '/proto.SetupConfigurator/InstallPlugins',
    grpcWeb.MethodType.UNARY,
    configurator_pb.Empty,
    configurator_pb.PluginResponse,
    (request: configurator_pb.Empty) => {
      return request.serializeBinary();
    },
    configurator_pb.PluginResponse.deserializeBinary
  );

  installPlugins(
    request: configurator_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<configurator_pb.PluginResponse>;

  installPlugins(
    request: configurator_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: configurator_pb.PluginResponse) => void): grpcWeb.ClientReadableStream<configurator_pb.PluginResponse>;

  installPlugins(
    request: configurator_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: configurator_pb.PluginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.SetupConfigurator/InstallPlugins',
        request,
        metadata || {},
        this.methodDescriptorInstallPlugins,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.SetupConfigurator/InstallPlugins',
    request,
    metadata || {},
    this.methodDescriptorInstallPlugins);
  }

  methodDescriptorUninstallPlugins = new grpcWeb.MethodDescriptor(
    '/proto.SetupConfigurator/UninstallPlugins',
    grpcWeb.MethodType.UNARY,
    configurator_pb.Empty,
    configurator_pb.PluginResponse,
    (request: configurator_pb.Empty) => {
      return request.serializeBinary();
    },
    configurator_pb.PluginResponse.deserializeBinary
  );

  uninstallPlugins(
    request: configurator_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<configurator_pb.PluginResponse>;

  uninstallPlugins(
    request: configurator_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: configurator_pb.PluginResponse) => void): grpcWeb.ClientReadableStream<configurator_pb.PluginResponse>;

  uninstallPlugins(
    request: configurator_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: configurator_pb.PluginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.SetupConfigurator/UninstallPlugins',
        request,
        metadata || {},
        this.methodDescriptorUninstallPlugins,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.SetupConfigurator/UninstallPlugins',
    request,
    metadata || {},
    this.methodDescriptorUninstallPlugins);
  }

}

