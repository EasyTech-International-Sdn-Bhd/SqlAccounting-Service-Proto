syntax = "proto3";

//protoc --go_out=. --go_opt=paths=source_relative \
//    --go-grpc_out=. --go-grpc_opt=paths=source_relative \
//    ./proto/manager.proto

//    protoc -I=. manager.proto \
//    --js_out=import_style=commonjs,binary:./ts \
//    --grpc-web_out=import_style=typescript,mode=grpcweb:./ts

// protoc -I=. --ts_out ./ts --proto_path . manager.proto

option go_package = "github.com/easytech-international-sdn-bhd/sqlaccounting/proto";

package proto;

message TaskClientRequest {
    int32 db = 1;
    string addr = 2;
    string username = 3;
    string password = 4;
}

message ApiClientRequest {
  string username = 1;
  string password = 2;
  string url = 3;
  string appName = 4;
}

message GcpCredentialsRequest {
  string jsonData = 1;
}

message GcpProjectIdRequest {
  string projectId = 1;
}

message IdResponse {
  string serviceId = 1;
}

message None {}

service ManagerConfigurator {
  rpc SetTaskClientConfig(TaskClientRequest) returns (None);
  rpc SetApiClientConfig(ApiClientRequest) returns (None);
  rpc SetGpcCredentials(GcpCredentialsRequest) returns (None);
  rpc SetGcpProjectId(GcpProjectIdRequest) returns (None);
  rpc GetServiceId(None) returns (IdResponse);
}