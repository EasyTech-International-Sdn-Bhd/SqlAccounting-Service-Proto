// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/controls.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControlManagement_Ping_FullMethodName    = "/proto.ControlManagement/Ping"
	ControlManagement_Start_FullMethodName   = "/proto.ControlManagement/Start"
	ControlManagement_Stop_FullMethodName    = "/proto.ControlManagement/Stop"
	ControlManagement_Restart_FullMethodName = "/proto.ControlManagement/Restart"
)

// ControlManagementClient is the client API for ControlManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlManagementClient interface {
	Ping(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Result, error)
	Start(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Result, error)
	Stop(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Result, error)
	Restart(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Result, error)
}

type controlManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewControlManagementClient(cc grpc.ClientConnInterface) ControlManagementClient {
	return &controlManagementClient{cc}
}

func (c *controlManagementClient) Ping(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, ControlManagement_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlManagementClient) Start(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, ControlManagement_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlManagementClient) Stop(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, ControlManagement_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlManagementClient) Restart(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, ControlManagement_Restart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlManagementServer is the server API for ControlManagement service.
// All implementations must embed UnimplementedControlManagementServer
// for forward compatibility.
type ControlManagementServer interface {
	Ping(context.Context, *Nothing) (*Result, error)
	Start(context.Context, *Nothing) (*Result, error)
	Stop(context.Context, *Nothing) (*Result, error)
	Restart(context.Context, *Nothing) (*Result, error)
	mustEmbedUnimplementedControlManagementServer()
}

// UnimplementedControlManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlManagementServer struct{}

func (UnimplementedControlManagementServer) Ping(context.Context, *Nothing) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedControlManagementServer) Start(context.Context, *Nothing) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedControlManagementServer) Stop(context.Context, *Nothing) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedControlManagementServer) Restart(context.Context, *Nothing) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedControlManagementServer) mustEmbedUnimplementedControlManagementServer() {}
func (UnimplementedControlManagementServer) testEmbeddedByValue()                           {}

// UnsafeControlManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlManagementServer will
// result in compilation errors.
type UnsafeControlManagementServer interface {
	mustEmbedUnimplementedControlManagementServer()
}

func RegisterControlManagementServer(s grpc.ServiceRegistrar, srv ControlManagementServer) {
	// If the following call pancis, it indicates UnimplementedControlManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControlManagement_ServiceDesc, srv)
}

func _ControlManagement_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlManagementServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlManagement_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlManagementServer).Ping(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlManagement_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlManagementServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlManagement_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlManagementServer).Start(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlManagement_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlManagementServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlManagement_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlManagementServer).Stop(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlManagement_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlManagementServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlManagement_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlManagementServer).Restart(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlManagement_ServiceDesc is the grpc.ServiceDesc for ControlManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ControlManagement",
	HandlerType: (*ControlManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ControlManagement_Ping_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _ControlManagement_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ControlManagement_Stop_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _ControlManagement_Restart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/controls.proto",
}
